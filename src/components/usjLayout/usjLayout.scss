@import '../../style/variables';
@import '../../style/mixins';
/* Rows and Columns */

.usj-layout {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  flex: 1;

  &.padded {
    // give some padding to inner content
    padding: 1em;
  }
}

@mixin layout($size: null) {
  @if $size == null {
    $size: '';
  }

  @if $size != '' {
    $size: '-#{$size}';
  }

  .usj-row#{$size} {
    flex-direction: row;
  }

  .usj-column#{$size} {
    flex-direction: column;
  }
}

@include layout();

/* Container */

.usj-layout.usj-container {
  width: 100%;
  max-width: 1200px;

  &.usj-centered {
    margin: 0 auto;
  }
}

/* Alignments */

@mixin layout-align($size: null) {
  @if $size == null {
    $size: '';
  }

  @if $size != '' {
    $size: '-#{$size}';
  }

  .usj-align#{$size}-start {
    justify-content: flex-start;
  }

  .usj-align#{$size}-center {
    justify-content: center;
  }

  .usj-align#{$size}-end {
    justify-content: flex-end;
  }
}

@include layout-align();

/* Vertical Alignments */

@mixin layout-vertical-align($size: null) {
  @if $size == null {
    $size: '';
  }

  @if $size != '' {
    $size: '-#{$size}';
  }

  .usj-vertical-align#{$size}-start {
    align-items: flex-start;
    align-content: flex-start;
  }

  .usj-vertical-align#{$size}-center {
    align-items: center;
    align-content: center;
  }

  .usj-vertical-align#{$size}-end {
    align-items: flex-end;
    align-content: flex-end;
  }

  .usj-vertical-align#{$size}-stretch {
    align-items: stretch;
    align-content: stretch;
  }
}

@include layout-vertical-align();

/* Gutter Size */

@mixin layout-gutter($margin: -12px, $padding: 12px) {
  &:not(.usj-column) {
    margin-right: $margin;
    margin-left: $margin;

    > .usj-layout {
      padding-right: $padding;
      padding-left: $padding;
    }
  }

  .usj-column {
    margin-top: $margin;
    margin-bottom: $margin;

    > .usj-layout {
      padding-top: $padding;
      padding-bottom: $padding;
    }
  }
}

.usj-gutter {
  @include layout-gutter();

  @include layout-small {
    @include layout-gutter(-8px, 8px);
  }
}

$sizes: (
  8,
  16,
  24,
  40
);

@each $item in $sizes {
  $margin: -$item / 2 + px;
  $padding: $item / 2 + px;

  .usj-gutter-#{$item} {
    @include layout-gutter($margin, $padding);
  }
}

/* Flex Size */

@mixin layout-flex($size: null) {
  @if $size == null {
    $size: '';
  }

  @if $size != '' {
    $size: '-#{$size}';
  }

  .usj-flex#{$size} {
    flex: 1 1;
  }

  .usj-flex#{$size}-33 {
    min-width: 33.33333%;
    flex: 0 1 33.33333%;
  }

  .usj-flex#{$size}-66 {
    min-width: 33.33333%;
    flex: 0 1 66.66666%;
  }

  .usj-flex-offset#{$size}-33 {
    margin-left: 33.33333%;
  }

  .usj-flex-offset#{$size}-66 {
    margin-left: 66.66666%;
  }

  @for $i from 1 through 20 {
    $counter: $i * 5;

    .usj-flex#{$size}-#{$counter} {
      min-width: #{$counter + '%'};
      flex: 0 1 #{$counter + '%'};
    }

    .usj-flex-offset#{$size}-#{$counter} {
      margin-left: #{$counter + '%'};
    }
  }
}

@include layout-flex();

/* Responsive Breakpoints */

@mixin breakpoint-layout($size) {
  @include layout($size);
  @include layout-flex($size);
  @include layout-align($size);

  .usj-hide-#{$size} {
    display: none;
  }
}

@include layout-xlarge {
  @include breakpoint-layout(xlarge);
}

@include layout-large {
  @include breakpoint-layout(large);
}

@include layout-medium {
  @include breakpoint-layout(medium);
}

@include layout-small {
  @include breakpoint-layout(small);
}

@include layout-xsmall {
  @include breakpoint-layout(xsmall);
}

@include layout-large-and-up {
  @include breakpoint-layout(large-and-up);
}

@include layout-medium-and-up {
  @include breakpoint-layout(medium-and-up);
}

@include layout-small-and-up {
  @include breakpoint-layout(small-and-up);
}

@include layout-xsmall-and-up {
  @include breakpoint-layout(xsmall-and-up);
}
